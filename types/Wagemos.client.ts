/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CamelCasedProperties } from 'type-fest'
import { SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import {
  AbstractQueryClient,
  AbstractAccountQueryClient,
  AbstractAccountClient,
  AppExecuteMsg,
  AppExecuteMsgFactory,
  AbstractClient,
  AbstractAccountId,
} from '@abstract-money/abstract.js'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  ExecuteMsg,
  QueryMsg,
  BetsResponse,
  ConfigResponse,
  ListOddsResponse,
  RoundsResponse,
  RoundResponse,
  OddsResponse,
} from './Wagemos.types'
import {
  WagemosQueryMsgBuilder,
  WagemosExecuteMsgBuilder,
} from './Wagemos.msg-builder'

interface AbstractAppQueryClient {
  moduleId: string
  accountQueryClient: AbstractAccountQueryClient
  _moduleAddress: string | undefined
}
export interface IWagemosAppQueryClient extends AbstractAppQueryClient {
  moduleId: string
  accountQueryClient: AbstractAccountQueryClient
  _moduleAddress: string | undefined
  round: (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          round: unknown
        }
      >['round']
    >
  ) => Promise<RoundResponse>
  listRounds: (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          list_rounds: unknown
        }
      >['list_rounds']
    >
  ) => Promise<RoundsResponse>
  odds: (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          odds: unknown
        }
      >['odds']
    >
  ) => Promise<OddsResponse>
  listOdds: (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          list_odds: unknown
        }
      >['list_odds']
    >
  ) => Promise<ListOddsResponse>
  config: () => Promise<ConfigResponse>
  bets: (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          bets: unknown
        }
      >['bets']
    >
  ) => Promise<BetsResponse>
  connectSigningClient: (
    signingClient: SigningCosmWasmClient,
    address: string
  ) => WagemosAppClient
  address: () => Promise<string>
}
export class WagemosAppQueryClient implements IWagemosAppQueryClient {
  accountQueryClient: AbstractAccountQueryClient
  moduleId: string
  _moduleAddress: string | undefined

  constructor({
    abstractQueryClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId,
  }: {
    abstractQueryClient: AbstractQueryClient
    accountId: AbstractAccountId
    managerAddress: string
    proxyAddress: string
    moduleId: string
  }) {
    this.accountQueryClient = new AbstractAccountQueryClient({
      abstract: abstractQueryClient,
      accountId,
      managerAddress,
      proxyAddress,
    })
    this.moduleId = moduleId
    this.round = this.round.bind(this)
    this.listRounds = this.listRounds.bind(this)
    this.odds = this.odds.bind(this)
    this.listOdds = this.listOdds.bind(this)
    this.config = this.config.bind(this)
    this.bets = this.bets.bind(this)
  }

  round = async (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          round: unknown
        }
      >['round']
    >
  ): Promise<RoundResponse> => {
    return this._query(WagemosQueryMsgBuilder.round(params))
  }
  listRounds = async (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          list_rounds: unknown
        }
      >['list_rounds']
    >
  ): Promise<RoundsResponse> => {
    return this._query(WagemosQueryMsgBuilder.listRounds(params))
  }
  odds = async (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          odds: unknown
        }
      >['odds']
    >
  ): Promise<OddsResponse> => {
    return this._query(WagemosQueryMsgBuilder.odds(params))
  }
  listOdds = async (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          list_odds: unknown
        }
      >['list_odds']
    >
  ): Promise<ListOddsResponse> => {
    return this._query(WagemosQueryMsgBuilder.listOdds(params))
  }
  config = async (): Promise<ConfigResponse> => {
    return this._query(WagemosQueryMsgBuilder.config())
  }
  bets = async (
    params: CamelCasedProperties<
      Extract<
        QueryMsg,
        {
          bets: unknown
        }
      >['bets']
    >
  ): Promise<BetsResponse> => {
    return this._query(WagemosQueryMsgBuilder.bets(params))
  }
  address = async (): Promise<string> => {
    if (!this._moduleAddress) {
      const address = await this.accountQueryClient.getModuleAddress(
        this.moduleId
      )
      if (address === null) {
        throw new Error(`Module address for ${this.moduleId} not found`)
      }
      this._moduleAddress = address
    }

    return this._moduleAddress
  }
  connectSigningClient = (
    signingClient: SigningCosmWasmClient,
    address: string
  ): WagemosAppClient => {
    return new WagemosAppClient({
      accountId: this.accountQueryClient.accountId,
      managerAddress: this.accountQueryClient.managerAddress,
      proxyAddress: this.accountQueryClient.proxyAddress,
      moduleId: this.moduleId,
      abstractClient: this.accountQueryClient.abstract.connectSigningClient(
        signingClient,
        address
      ),
    })
  }
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountQueryClient.queryModule({
      moduleId: this.moduleId,
      moduleType: 'app',
      queryMsg,
    })
  }
}
export interface IWagemosAppClient extends IWagemosAppQueryClient {
  accountClient: AbstractAccountClient
  createRound: (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          create_round: unknown
        }
      >['create_round']
    >,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  register: (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          register: unknown
        }
      >['register']
    >,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  updateAccounts: (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          update_accounts: unknown
        }
      >['update_accounts']
    >,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  placeBet: (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          place_bet: unknown
        }
      >['place_bet']
    >,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  distributeWinnings: (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          distribute_winnings: unknown
        }
      >['distribute_winnings']
    >,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  closeRound: (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          close_round: unknown
        }
      >['close_round']
    >,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  updateConfig: (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          update_config: unknown
        }
      >['update_config']
    >,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
}
export class WagemosAppClient
  extends WagemosAppQueryClient
  implements IWagemosAppClient
{
  accountClient: AbstractAccountClient

  constructor({
    abstractClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId,
  }: {
    abstractClient: AbstractClient
    accountId: AbstractAccountId
    managerAddress: string
    proxyAddress: string
    moduleId: string
  }) {
    super({
      abstractQueryClient: abstractClient,
      accountId,
      managerAddress,
      proxyAddress,
      moduleId,
    })
    this.accountClient = AbstractAccountClient.fromQueryClient(
      this.accountQueryClient,
      abstractClient
    )
    this.createRound = this.createRound.bind(this)
    this.register = this.register.bind(this)
    this.updateAccounts = this.updateAccounts.bind(this)
    this.placeBet = this.placeBet.bind(this)
    this.distributeWinnings = this.distributeWinnings.bind(this)
    this.closeRound = this.closeRound.bind(this)
    this.updateConfig = this.updateConfig.bind(this)
  }

  createRound = async (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          create_round: unknown
        }
      >['create_round']
    >,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return this._execute(
      WagemosExecuteMsgBuilder.createRound(params),
      fee,
      memo,
      _funds
    )
  }
  register = async (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          register: unknown
        }
      >['register']
    >,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return this._execute(
      WagemosExecuteMsgBuilder.register(params),
      fee,
      memo,
      _funds
    )
  }
  updateAccounts = async (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          update_accounts: unknown
        }
      >['update_accounts']
    >,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return this._execute(
      WagemosExecuteMsgBuilder.updateAccounts(params),
      fee,
      memo,
      _funds
    )
  }
  placeBet = async (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          place_bet: unknown
        }
      >['place_bet']
    >,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return this._execute(
      WagemosExecuteMsgBuilder.placeBet(params),
      fee,
      memo,
      _funds
    )
  }
  distributeWinnings = async (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          distribute_winnings: unknown
        }
      >['distribute_winnings']
    >,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return this._execute(
      WagemosExecuteMsgBuilder.distributeWinnings(params),
      fee,
      memo,
      _funds
    )
  }
  closeRound = async (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          close_round: unknown
        }
      >['close_round']
    >,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return this._execute(
      WagemosExecuteMsgBuilder.closeRound(params),
      fee,
      memo,
      _funds
    )
  }
  updateConfig = async (
    params: CamelCasedProperties<
      Extract<
        ExecuteMsg,
        {
          update_config: unknown
        }
      >['update_config']
    >,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return this._execute(
      WagemosExecuteMsgBuilder.updateConfig(params),
      fee,
      memo,
      _funds
    )
  }
  _execute = async (
    msg: ExecuteMsg,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return await this.accountClient.abstract.client.execute(
      this.accountClient.sender,
      await this.address(),
      moduleMsg,
      fee,
      memo,
      _funds
    )
  }
}
