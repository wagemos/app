/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin } from '@cosmjs/amino'
import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import { toUtf8 } from '@cosmjs/encoding'
import {
  AppExecuteMsg,
  AppExecuteMsgFactory,
} from '@abstract-money/abstract.js'
import {
  Decimal,
  ExecuteMsg,
  AssetEntry,
  AccountOdds,
  AccountId,
  Bet,
} from './Wagemos.types'
export interface WagemosMessage {
  contractAddress: string
  sender: string
  createRound: (
    {
      baseBetToken,
      description,
      name,
    }: {
      baseBetToken: AssetEntry
      description: string
      name: string
    },
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  register: (
    {
      roundId,
    }: {
      roundId: number
    },
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  updateAccounts: (
    {
      roundId,
      toAdd,
      toRemove,
    }: {
      roundId: number
      toAdd: AccountOdds[]
      toRemove: AccountId[]
    },
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  placeBet: (
    {
      bet,
      roundId,
    }: {
      bet: Bet
      roundId: number
    },
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  distributeWinnings: (
    {
      roundId,
    }: {
      roundId: number
    },
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  closeRound: (
    {
      roundId,
      winner,
    }: {
      roundId: number
      winner?: AccountId
    },
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  updateConfig: (
    {
      rake,
    }: {
      rake?: Decimal
    },
    _funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
}
export class WagemosMessageComposer implements WagemosMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.createRound = this.createRound.bind(this)
    this.register = this.register.bind(this)
    this.updateAccounts = this.updateAccounts.bind(this)
    this.placeBet = this.placeBet.bind(this)
    this.distributeWinnings = this.distributeWinnings.bind(this)
    this.closeRound = this.closeRound.bind(this)
    this.updateConfig = this.updateConfig.bind(this)
  }

  createRound = (
    {
      baseBetToken,
      description,
      name,
    }: {
      baseBetToken: AssetEntry
      description: string
      name: string
    },
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      create_round: {
        base_bet_token: baseBetToken,
        description,
        name,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  register = (
    {
      roundId,
    }: {
      roundId: number
    },
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      register: {
        round_id: roundId,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  updateAccounts = (
    {
      roundId,
      toAdd,
      toRemove,
    }: {
      roundId: number
      toAdd: AccountOdds[]
      toRemove: AccountId[]
    },
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_accounts: {
        round_id: roundId,
        to_add: toAdd,
        to_remove: toRemove,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  placeBet = (
    {
      bet,
      roundId,
    }: {
      bet: Bet
      roundId: number
    },
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      place_bet: {
        bet,
        round_id: roundId,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  distributeWinnings = (
    {
      roundId,
    }: {
      roundId: number
    },
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      distribute_winnings: {
        round_id: roundId,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  closeRound = (
    {
      roundId,
      winner,
    }: {
      roundId: number
      winner?: AccountId
    },
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      close_round: {
        round_id: roundId,
        winner,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  updateConfig = (
    {
      rake,
    }: {
      rake?: Decimal
    },
    _funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_config: {
        rake,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
}
